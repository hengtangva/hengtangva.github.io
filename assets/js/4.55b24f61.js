(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{311:function(v,_,t){v.exports=t.p+"assets/img/parse.f5028452.png"},384:function(v,_,t){v.exports=t.p+"assets/img/dns.1edee9d6.png"},385:function(v,_,t){v.exports=t.p+"assets/img/dns2.ce2e8017.jpg"},386:function(v,_,t){v.exports=t.p+"assets/img/tcphead.2f87bd2e.jpg"},387:function(v,_,t){v.exports=t.p+"assets/img/tcphand.bc43e039.jpg"},388:function(v,_,t){v.exports=t.p+"assets/img/httptext.8950ea10.png"},389:function(v,_,t){v.exports=t.p+"assets/img/tcpwave.aaab84f3.jpg"},518:function(v,_,t){"use strict";t.r(_);var r=t(42),p=Object(r.a)({},(function(){var v=this,_=v.$createElement,r=v._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"输入-url-到生成页面过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输入-url-到生成页面过程"}},[v._v("#")]),v._v(" 输入 url 到生成页面过程")]),v._v(" "),r("h2",{attrs:{id:"url-的构成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#url-的构成"}},[v._v("#")]),v._v(" url 的构成")]),v._v(" "),r("p",[v._v("先来了解 url")]),v._v(" "),r("p",[v._v("url：uniform resource locator  (统一资源定位符)。")]),v._v(" "),r("p",[v._v("其作用是来定位网上的资源。")]),v._v(" "),r("p",[v._v("这里还是想讲一下，uri 和 url 的区别。")]),v._v(" "),r("p",[v._v("uri ： uniform resource identitifier  (统一资源标识符)")]),v._v(" "),r("p",[v._v("就是用来唯一标识网上的一个资源。")]),v._v(" "),r("p",[v._v("在回到 url 它是唯一定位网上的资源的，也就是说，给了 url 就能确定某个资源。(不正是 uri 的作用吗？)")]),v._v(" "),r("p",[v._v("所以，url 是 uri 的一种实现方式，也可以说，url 是 uri 的子集。")]),v._v(" "),r("hr"),v._v(" "),r("p",[v._v("好了，由于我们用基本都用 url 来实现 uri 所以就只谈 url ，碰到 uri 其实也可以用 url 代替。以便理解。")]),v._v(" "),r("p",[v._v("来看一个 url ：")]),v._v(" "),r("p",[r("strong",[v._v("scheme://host.domain:port/path/filename")])]),v._v(" "),r("p",[v._v("一一解释各个部分表示意思。")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("scheme: 协议，常见的协议有，http， https，ftp，file。")])]),v._v(" "),r("li",[r("p",[v._v("host：定义域主机，http 默认的是 www 。")])]),v._v(" "),r("li",[r("p",[v._v("domain：域名，用于定位计算机地址,一般就是服务器地址。")])]),v._v(" "),r("li",[r("p",[v._v("port：端口号，计算机上有很多端口号，服务器监听不同端口号，做不同的事。")])]),v._v(" "),r("li",[r("p",[v._v("path：定义服务上的路径。")])]),v._v(" "),r("li",[r("p",[v._v("file：服务器上的文件资源。")])])]),v._v(" "),r("p",[v._v("好了，现在我们输入了这个 url 来看浏览器接下来干什么。")]),v._v(" "),r("hr"),v._v(" "),r("h2",{attrs:{id:"dns-域名解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dns-域名解析"}},[v._v("#")]),v._v(" DNS 域名解析")]),v._v(" "),r("p",[v._v("IP 地址：")]),v._v(" "),r("p",[v._v("IP 地址是用来唯一标识一个计算机的二进制数。")]),v._v(" "),r("p",[v._v("ipv4 采用的是 32 位，但随着互联网的发展，发现 2 的 32 次方减 1 个 ip不够用了。")]),v._v(" "),r("p",[v._v("于是出现了 ipv6，它用 128 位来表示 ip 地址，从而解决了 ip 不够用的问题。")]),v._v(" "),r("hr"),v._v(" "),r("p",[v._v("计算机的 ip 地址是一串数字，而域名是一串字符串(为了方便人记忆)。")]),v._v(" "),r("p",[v._v("所以，我们首先要把字符串的域名解析为 ip 地址才能找到要请求交流的计算机。")]),v._v(" "),r("p",[v._v("而这，就是我们的 DNS 的工作了。")]),v._v(" "),r("p",[v._v("DNS 和 HTTP 一样，是应用层的协议。")]),v._v(" "),r("p",[v._v("但这里的 DNS 我们可以理解为一个服务器，url 先发给 DNS 服务器，它返回一个 ip 。")]),v._v(" "),r("p",[r("img",{attrs:{src:t(384),alt:""}})]),v._v(" "),r("p",[v._v("至于 DNS 的查找过程，下面图可以清晰解释。")]),v._v(" "),r("p",[r("img",{attrs:{src:t(385),alt:""}})]),v._v(" "),r("p",[v._v("这样，就得到 ip 地址了，最后把其他信息和 ip 地址一起发到公网上，找服务器。")]),v._v(" "),r("p",[v._v("经过路由一站一站的中转，我们找到了要访问的计算机，接下来就是和它建立连接了。")]),v._v(" "),r("h2",{attrs:{id:"tcp-三次握手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手"}},[v._v("#")]),v._v(" TCP 三次握手")]),v._v(" "),r("p",[v._v("首先，还是先了解一下 TCP 。")]),v._v(" "),r("p",[v._v("TCP 位于 TCP/IP 协议中的传输层，上层就是应用层(http,https), 下层是网络层(ip)。")]),v._v(" "),r("ol",[r("li",[r("p",[v._v("先是网络层的 IP 找到要连接的计算机，")])]),v._v(" "),r("li",[r("p",[v._v("传输层的 TCP 建立连接，")])]),v._v(" "),r("li",[r("p",[v._v("应用层的 HTTP 才能互相发送数据。")])])]),v._v(" "),r("p",[v._v("TCP 从网络层那里接受到数据包，此时的数据包包含了 "),r("strong",[v._v("传输的数据")]),v._v(" 和 "),r("strong",[v._v("TCP 首部")]),v._v("。")]),v._v(" "),r("p",[v._v("数据就是应用层我们要传输的数据，这里来看如何用 TCP 首部建立连接。")]),v._v(" "),r("p",[v._v("tcp 首部：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(386),alt:""}})]),v._v(" "),r("p",[v._v("来分析一下首部包含的信息")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("TCP 端口号"),r("br"),v._v("\nTCP 的连接需要四个要素的确定唯一的一个连接。"),r("br"),v._v("\n（源IP,源端口号） + （目的IP,目的端口号）\n所以 tcp 首部预留了两个 16 位作为端口号的存储，也就是说，端口号的范围是 1^16 = 65535,1024 以下是系统保留的。")])]),v._v(" "),r("li",[r("p",[v._v("TCP 的序号和确认号")]),v._v(" "),r("ul",[r("li",[v._v("32 位序号 seq ：通过这个来确认发送数据包的有序。")]),v._v(" "),r("li",[v._v("32 位确认号 ack ：tcp 对上一次 seq 的序号做出的序列号，用来响应 tcp 报文，给收到的 tcp 报文段的序号 seq 加 1。")])])]),v._v(" "),r("li",[r("p",[v._v("TCP 的标志位："),r("br"),v._v("\n这里仅讲最常用的：")]),v._v(" "),r("ul",[r("li",[v._v("SYN: async, 同步标志位，用于建立会话连接。")]),v._v(" "),r("li",[v._v("ACK: acknowledge, 确认标记位，对已接受的数据包进行确认。")]),v._v(" "),r("li",[v._v("FIN: finsih， 完成标记位，表示已经没有数据要发送了， 即将关闭连接。")])])])]),v._v(" "),r("hr"),v._v(" "),r("p",[v._v("okk， 了解了这些前置知识，我们再来看三次握手。"),r("br"),v._v("\ns\n直接看图吧：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(387),alt:""}})]),v._v(" "),r("ul",[r("li",[r("p",[v._v("第一次握手："),r("br"),v._v("\n客户端将 TCP 报文 SYN 标志位设为 1 ，表明请求建立连接"),r("br"),v._v("\n随机生成一个序列号值 seq = j，指明连哪个端口。"),r("br"),v._v("\n然后首部发送给服务器")])]),v._v(" "),r("li",[r("p",[v._v("第二次握手："),r("br"),v._v("\n服务器收到 SYN = 1 后，知道客户端请求连接，所以设置："),r("br"),v._v("\nACK = 1,表明收到了请求。"),r("br"),v._v("\nSYN = 1,表明情求连接客户端。"),r("br"),v._v("\nack = J + 1,"),r("br"),v._v("\n随机生成一个 seq = K."),r("br"),v._v("\n然后将首部发给客户端。")])]),v._v(" "),r("li",[r("p",[v._v("第三次握手："),r("br"),v._v("\n客户端收到数据包后，检查 ack 是否为 J+1，如果正确就将标志位 ACK 设为 1 ，ack = K + 1,发送给服务器。"),r("br"),v._v("\n服务器端检查 ack 是否为 K + 1, ACK 是否为 1 ，如果是，说明连接成功了，可以互发数据了。")])])]),v._v(" "),r("p",[v._v("为什么 TCP 要握手三次呢？")]),v._v(" "),r("p",[v._v("目的是避免通信过程的错误，比如失效了的连接请求突然又发送传送到了服务端，而客户端可能因为网络不好，早就下线不在了，从而引起错误。")]),v._v(" "),r("p",[v._v("这和人们打电话很相似。")]),v._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),r("p",[v._v("三次握手："),r("br"),v._v("\n‘喂，你听得到吗？’"),r("br"),v._v("\n‘我听的到，你听得到我说话吗？’"),r("br"),v._v("\n‘嗯，我听的到你说话’")])]),v._v(" "),r("p",[v._v("经过这三次确认，两人才能确认电话是好的，才能继续说话。")]),v._v(" "),r("p",[v._v("好了，经过漫长的握手，建立连接，接下来就是应用层的 HTTP 的事情了。")]),v._v(" "),r("hr"),v._v(" "),r("h2",{attrs:{id:"发送-http-请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发送-http-请求"}},[v._v("#")]),v._v(" 发送 HTTP 请求")]),v._v(" "),r("p",[v._v("首先，明确一点，http 协议中，浏览器和服务器发送的是 http 报文。")]),v._v(" "),r("h3",{attrs:{id:"报文和实体"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#报文和实体"}},[v._v("#")]),v._v(" 报文和实体")]),v._v(" "),r("p",[v._v("这里得捋清楚实体和报文的概念：")]),v._v(" "),r("p",[v._v("图解 http 上是这么说的：")]),v._v(" "),r("p",[v._v("通常报文等于实体，只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。")]),v._v(" "),r("p",[v._v("我是这样理解的，实体主体就是我们这边的数据，比如要发送 hello world，实体主体和报文主体都是 hello world。")]),v._v(" "),r("p",[v._v("但是，当开始传输时，不可能原封不动把 hello world 发出去，我们要进行编码，如 crc 海明，等编码。")]),v._v(" "),r("p",[v._v("编码后，我们要发的还是叫报文，但不能叫实体了，因为实体还是 hello world。")]),v._v(" "),r("p",[v._v("但是，传输编码，我们是不用关心得，我们只在乎还没发送的信息，所以这里就统称报文。")]),v._v(" "),r("hr"),v._v(" "),r("h3",{attrs:{id:"发送请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发送请求"}},[v._v("#")]),v._v(" 发送请求")]),v._v(" "),r("p",[v._v("HTTP 请求报文由三部分构成：")]),v._v(" "),r("ol",[r("li",[r("p",[v._v("请求行： 包含了请求方法，请求 uri，协议版本。")])]),v._v(" "),r("li",[r("p",[v._v("请求首部： 包含了一些通信的信息，包括 cookie ，Content-Type 等等。")])]),v._v(" "),r("li",[r("p",[v._v("请求主体： 即我们想发送的数据了。")])])]),v._v(" "),r("p",[v._v("如图：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(388),alt:""}})]),v._v(" "),r("p",[v._v("请求报文发送给服务器后，再来看服务器的响应报文。")]),v._v(" "),r("hr"),v._v(" "),r("h3",{attrs:{id:"响应报文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[v._v("#")]),v._v(" 响应报文")]),v._v(" "),r("p",[v._v("响应报文也由三部分组成：")]),v._v(" "),r("ol",[r("li",[r("p",[v._v("响应行： 包含了协议版本，状态码，以及解释状态码的原因短语。")])]),v._v(" "),r("li",[r("p",[v._v("响应头部： 和请求头部一样，用于通信以及对响应体的描述。")])]),v._v(" "),r("li",[r("p",[v._v("响应主体： 即我们要响应的数据。")])])]),v._v(" "),r("p",[v._v("其中还有很多细节，这里不详细解释，分到其他章节讲解。")]),v._v(" "),r("p",[v._v("拿到数据后，我们 就可以解析数据并渲染页面了。")]),v._v(" "),r("hr"),v._v(" "),r("h2",{attrs:{id:"浏览器解析渲染页面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[v._v("#")]),v._v(" 浏览器解析渲染页面")]),v._v(" "),r("p",[v._v("拿到响应的 html 文本后，浏览器会按如下图处理：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(311),alt:""}})]),v._v(" "),r("p",[v._v("主要分为 5 个步骤：")]),v._v(" "),r("ol",[r("li",[r("p",[v._v("浏览器解析 html 生成 dom 树，生成 dom 树是深度优先遍历的。")])]),v._v(" "),r("li",[r("p",[v._v("解析 css 生成 css 树。")])]),v._v(" "),r("li",[r("p",[v._v("将二者合起来生成 渲染树。")])]),v._v(" "),r("li",[r("p",[v._v("根据渲染树计算每个节点的信息。")])]),v._v(" "),r("li",[r("p",[v._v("根据计算的信息绘制页面。")])])]),v._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),r("p",[v._v("注意的是，css 树没有生成的话，是没法生成渲染树的，也就是说整个页面都没法生成。")]),v._v(" "),r("p",[v._v("这也是为什么 css 样式要写在 html 的前面。")]),v._v(" "),r("p",[v._v("当浏览器碰到脚本的时候，会停止解析，去执行 js 的脚本，此时页面就会延迟得到。")]),v._v(" "),r("p",[v._v("这也是为什么 js 脚本要放在 html 的最后面。")])]),v._v(" "),r("hr"),v._v(" "),r("p",[v._v("数据传输完毕就要断开连接了，就由回到我们的 TCP")]),v._v(" "),r("h3",{attrs:{id:"tcp-的四次挥手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的四次挥手"}},[v._v("#")]),v._v(" TCP 的四次挥手")]),v._v(" "),r("p",[v._v("四次挥手过程如下图：")]),v._v(" "),r("p",[r("img",{attrs:{src:t(389),alt:""}})]),v._v(" "),r("p",[v._v("再来详细了解四次挥手的细节。"),r("br"),v._v("\n挥手请求可以是 client ，也可以是 server，我们以 client 请求分析")]),v._v(" "),r("ol",[r("li",[r("p",[v._v("client 将 FIN = 1 没有东西要发送了，请求断开连接，"),r("br"),v._v("\n随机生成一个 seq = X 保证顺序。")])]),v._v(" "),r("li",[r("p",[v._v("server 将 ack = X + 1, ACK = 1,表示收到了你的断开请求。")])]),v._v(" "),r("li",[r("p",[v._v("server 将 FIN = 1, 生成一个 seq = N 表示，我也没有东西向你发送了。")])]),v._v(" "),r("li",[r("p",[v._v("client 收到 server 的报文后，将 ACK = 1, ack = N + 1, 表示我也收到你的关闭连接的请求了，可以断开连接的，然后 Client 进入 TIME_WAIT 阶段。 server 接受到报文后，就关闭了它这边的连接。"),r("br"),v._v("\nclient 等待 2MSL 时间后，依然没有收到回复，就知道 server 已经关闭连接了。自己也关闭连接。")])])]),v._v(" "),r("hr"),v._v(" "),r("p",[r("strong",[v._v("为什么有 4 次挥手")]),r("br"),v._v("\n，其中两次是确认 client 没有资源发了，可以关闭 client 的连接"),r("br"),v._v("\n另两次是却 server 也没东西发了，关闭 server 的连接。")]),v._v(" "),r("p",[r("strong",[v._v("为什么要等待 2MSL")])]),v._v(" "),r("p",[v._v("MSL 是一个报文最大生存时间")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("第一点：保证TCP协议的全双工连接能够可靠关闭：由于IP协议的不可靠性或者是其它网络原因，导致了Server端没有收到Client端的ACK报文，那么Server端就会在超时之后重新发送FIN，如果此时Client端的连接已经关闭处于CLOESD状态，那么重发的FIN就找不到对应的连接了，从而导致连接错乱，所以，Client端发送完最后的ACK不能直接进入CLOSED状态，而要保持TIME_WAIT，当再次收到FIN的收，能够保证对方收到ACK，最后正确关闭连接。")])]),v._v(" "),r("li",[r("p",[v._v("第二点：保证这次连接的重复数据段从网络中消失如果Client端发送最后的ACK直接进入CLOSED状态，然后又再向Server端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达Client端，由于新老连接的端口号和IP都一样，TCP协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱。所以TCP连接需要在TIME_WAIT状态等待2倍MSL，才能保证本次连接的所有数据在网络中消失。")])])]),v._v(" "),r("p",[v._v("参考；https://blog.fundebug.com/2019/02/28/what-happens-from-url-to-webpage/"),r("br"),v._v("\nhttps://juejin.cn/post/6844904070000410631")])])}),[],!1,null,null,null);_.default=p.exports}}]);