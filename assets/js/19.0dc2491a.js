(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{371:function(v,_,e){v.exports=e.p+"assets/img/garbish1.a4c62e16.jpg"},372:function(v,_,e){v.exports=e.p+"assets/img/garbish2.7692611c.jpg"},510:function(v,_,e){"use strict";e.r(_);var a=e(42),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[v._v("#")]),v._v(" 垃圾回收")]),v._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),a("p",[v._v("这里的垃圾回收以 v8 为例，")]),v._v(" "),a("h2",{attrs:{id:"v8-的对象分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-的对象分配"}},[v._v("#")]),v._v(" v8 的对象分配")]),v._v(" "),a("ul",[a("li",[v._v("V8 采用堆来存取对象")])]),v._v(" "),a("p",[v._v("我们可以在 node 环境下查看 v8 的内存使用量：")]),v._v(" "),a("p",[v._v("shell 下，输入 node 进入 node 环境，")]),v._v(" "),a("blockquote",[a("p",[v._v("process.memoryUsage()")])]),v._v(" "),a("p",[v._v("我的输出结果如下；")]),v._v(" "),a("blockquote",[a("p",[v._v("{"),a("br"),v._v("\nrss: 24276992,"),a("br"),v._v("\nheapTotal: 5484544,"),a("br"),v._v("\nheapUsed: 2973632,"),a("br"),v._v("\nexternal: 1568661,"),a("br"),v._v("\narrayBuffers: 124083"),a("br"),v._v("\n}")])]),v._v(" "),a("ol",[a("li",[a("p",[v._v("heapTotal 是 v8 申请到的堆内存")])]),v._v(" "),a("li",[a("p",[v._v("heapUsed 是已经使用的堆内存")])]),v._v(" "),a("li",[a("p",[v._v("rss 是")])])]),v._v(" "),a("h2",{attrs:{id:"v8-的内存限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-的内存限制"}},[v._v("#")]),v._v(" v8 的内存限制")]),v._v(" "),a("ul",[a("li",[v._v("v8 的内存限制是 64 位系统约为 1.4G, 32 位系统约为 0.7G")])]),v._v(" "),a("p",[v._v("如果我们在代码中声明变量并赋值，所使用对象的内存就分配在堆中；")]),v._v(" "),a("p",[v._v("如果已申请的堆空闲内存不够分配新的对象，将继续申请堆，直到堆的大小超过 v8 的限制为止。")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("所以我们想问，为何 v8 要限制堆的大小？")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("表层原因是，v8 最初设计是为浏览器的，不大可能遇到大量使用内存的场景。")])]),v._v(" "),a("li",[a("p",[v._v("更深层原因是，v8 的垃圾回收机制，以 1.5G 的垃圾回收堆内存为例，v8 做一次小的垃圾回收要 60 毫秒以上，做一次非增量式的垃圾回收甚至要 1s 以上，而回收的阶段是阻塞主线程的，也就是说，清理垃圾的阶段，你的 js 代码是运行不了的")])])]),v._v(" "),a("p",[v._v("下面我们就来介绍一下 v8 的垃圾回收机制")]),v._v(" "),a("hr"),v._v(" "),a("h2",{attrs:{id:"v8-的垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-的垃圾回收机制"}},[v._v("#")]),v._v(" v8 的垃圾回收机制")]),v._v(" "),a("ul",[a("li",[v._v("v8 的垃圾回收策略主要基于 "),a("strong",[v._v("分代式垃圾回收机制")])])]),v._v(" "),a("p",[v._v("下面会对该机制进行介绍")]),v._v(" "),a("h3",{attrs:{id:"v8-的内存分代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v8-的内存分代"}},[v._v("#")]),v._v(" v8 的内存分代")]),v._v(" "),a("p",[v._v("v8 中主要将内存分为 "),a("strong",[v._v("新生代")]),v._v("  和 "),a("strong",[v._v("老生代")])]),v._v(" "),a("ul",[a("li",[a("p",[v._v("新生代: 新生代中存放的是 存活时间比较短的对象。")])]),v._v(" "),a("li",[a("p",[v._v("老生代：老生代中存放的是 存活时间比较长的对象。")])])]),v._v(" "),a("p",[v._v("v8 堆的整体大小就是新生代所用的内存空间加上老生代所用的内存空间")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("在默认情况下，")]),v._v(" "),a("p",[v._v("v8 源码中默认设置老生代的内存为 1400MB (64位)")]),v._v(" "),a("p",[v._v("新生代中的内存由两个 reserved_semispace_size 构成，(至于为什么分两部分，后面会有说), 一个reservd_semispace_size 的大小是 16M (64位)")]),v._v(" "),a("p",[v._v("所以，新生代中的内存Wie 16 * 2 = 32MB")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("在 v8 源码中有这样一段：")]),v._v(" "),a("div",{staticClass:"language-C++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[v._v("// returns the maxium amount of memory reserved for the heap.\n// For the young generation, we reserve 4 times the amount needed for a semi space\n// The young generation consist of two semi spaces\n// and we reserve twice the amount needed for those in order to ensure that\n// the new space can be aligned to its size\nintptr_t MaxReserved() {\n    return 4 * reversed_semi_size + max_old_generation_size;\n}\n")])]),v._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[v._v("1")]),a("br"),a("span",{staticClass:"line-number"},[v._v("2")]),a("br"),a("span",{staticClass:"line-number"},[v._v("3")]),a("br"),a("span",{staticClass:"line-number"},[v._v("4")]),a("br"),a("span",{staticClass:"line-number"},[v._v("5")]),a("br"),a("span",{staticClass:"line-number"},[v._v("6")]),a("br"),a("span",{staticClass:"line-number"},[v._v("7")]),a("br"),a("span",{staticClass:"line-number"},[v._v("8")]),a("br")])]),a("p",[v._v("也就是说，它为了确保新生代能放的下，特地用了 4 个 semi_space_size")]),v._v(" "),a("p",[v._v("所以，64 为 v8 的最大堆内存值为：")]),v._v(" "),a("p",[a("strong",[v._v("1400 + 4 * 16 = 1464MB")])]),v._v(" "),a("p",[v._v("也就是我们之前说的约为 1.5G")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("上面我们了解了分代，分代的原因是为了在不同的分代内存上用不同的回收算法。")]),v._v(" "),a("h3",{attrs:{id:"scavenge-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scavenge-算法"}},[v._v("#")]),v._v(" Scavenge 算法")]),v._v(" "),a("p",[v._v("新生代的对象主要用 Scavenge 算法进行垃圾回收。")]),v._v(" "),a("p",[v._v("在 Scavenge 的具体实现中，采取了 Cheney 算法。")]),v._v(" "),a("p",[v._v("Cheney 算法是采用复制的方式实现垃圾回收。")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("它将内存一分为二，每一部分空间为 semispace，之前提到的，新生代内存有两个 semispace")])]),v._v(" "),a("li",[a("p",[v._v("一个处于使用中，称为 from 空间，另一个处于空闲中，称为 to 空间")])]),v._v(" "),a("li",[a("p",[v._v("当我们分配对象时，先是在 from 空间中进行内存分配")])]),v._v(" "),a("li",[a("p",[v._v("当我们进行垃圾回收的时候，会检查 from 中的存活对象，这些存活对象将复制到 to 空间中，而非存活对象占用的空间将会被释放。")])]),v._v(" "),a("li",[a("p",[v._v("完成复制后， from 空间 to 空间发生角色对换。")])])]),v._v(" "),a("p",[v._v("简而言之，在垃圾回收的过程中，就是通过将存活的对象在两个 semispace 空间中之间进行复制")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("Scavenge 的缺点是只能使用堆内存的一半，但由于新生代空间中，存活的对象比较少，所以它在时间效率是上有优异表现")]),v._v(" "),a("p",[v._v("这是典型的空间换时间。")]),v._v(" "),a("hr"),v._v(" "),a("h4",{attrs:{id:"晋升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#晋升"}},[v._v("#")]),v._v(" 晋升")]),v._v(" "),a("p",[v._v("当一个对象经过多次复制，依然存活时，它将会被认为是生命周期比较长的对象，")]),v._v(" "),a("p",[v._v("这种生命周期比较长的对象随后会被移动到老生代中，采用新的垃圾回收算反进行管理。")]),v._v(" "),a("p",[v._v("这种，对象从新生代移动到老生代的过程称为 "),a("strong",[v._v("晋升")])]),v._v(" "),a("p",[v._v("对象的晋升条件主要有两个：")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("一个是对象是否经历过 Scavenge 回收")])]),v._v(" "),a("li",[a("p",[v._v("一个是 to 空间的内存占用比例超过限制")])]),v._v(" "),a("li",[a("p",[v._v("在默认情况下，v8 的对象分配主要集中在 from 空间。")])])]),v._v(" "),a("p",[v._v("对象从 from 空间复制到 to 空间时，会检查它的内存地址判断这个对象是否经历过一次 scavenge 回收。")]),v._v(" "),a("p",[v._v("如果，经历过了，会将对象从 from 空间 复制到 老生代空间。")]),v._v(" "),a("p",[v._v("如果没有，就复制到 to 空间。")]),v._v(" "),a("p",[v._v("流程如下：")]),v._v(" "),a("p",[a("img",{attrs:{src:e(371),alt:""}})]),v._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[v._v("另一个判断条件是 to 空间 的内存占比，")])]),v._v(" "),a("p",[v._v("当要从 from 空间中复制一个对象到 to 空间时，如果 to 空间已经使用了超过 25%")]),v._v(" "),a("p",[v._v("那么，这个对象直接晋升到老生代空间中， 晋升判断逻辑如下：")]),v._v(" "),a("p",[a("img",{attrs:{src:e(372),alt:""}})]),v._v(" "),a("p",[v._v("至于设置 25%  这个限制的原因是当这次 Scavenge 回收完成后，这个 to 空间 就会变成 from 空间")]),v._v(" "),a("p",[v._v("如果占比过高，会影响后续的内存分配。")]),v._v(" "),a("h3",{attrs:{id:"mark-sweep-算法-mark-compact-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mark-sweep-算法-mark-compact-算法"}},[v._v("#")]),v._v(" mark-sweep 算法 & mark-compact 算法")]),v._v(" "),a("p",[v._v("在 v8 中，老生代的内存主要是采用 这两种算法结合进行回收。")]),v._v(" "),a("h4",{attrs:{id:"mark-sweep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mark-sweep"}},[v._v("#")]),v._v(" mark-sweep")]),v._v(" "),a("p",[v._v("mark-sweep 是清除标记的意思。")]),v._v(" "),a("p",[v._v("mark-sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象。")]),v._v(" "),a("p",[v._v("在随后的清除阶段中，只会清除没有标记的对象。")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("这种方法也有其缺点，由于对象的内存分配是连续的，所以一次清除后，可能出现很多内存碎片。")]),v._v(" "),a("p",[v._v("进而导致，大的对象可能不能别分配到堆中，尽管内存是足够的。")]),v._v(" "),a("p",[v._v("所以，我们能想到的是，希望可以清除之后，能把存活的对象整理到一起，这样，空闲的碎片就被合并起来了。")]),v._v(" "),a("p",[v._v("这也就引出了我们的 mark-compact 算法。")]),v._v(" "),a("h4",{attrs:{id:"mark-compact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mark-compact"}},[v._v("#")]),v._v(" mark-compact")]),v._v(" "),a("p",[v._v("mark-compact 是标记整理的意思，它是基于上面的 mark-sweep 演变而来的。")]),v._v(" "),a("p",[v._v("也就是像我们上面想要的那样，对死亡的对象标记后，会将其后的活着的对象移动到一端。")]),v._v(" "),a("p",[v._v("当然，整理是要消耗时间的，v8 主要使用 mark-sweep 。")]),v._v(" "),a("p",[v._v("当空间不足以对从新生代晋升的对象进行内内存分配时，才使用 mark-compact")]),v._v(" "),a("p",[v._v("上述三种算法的比较如下：")]),v._v(" "),a("table",[a("thead",[a("tr",[a("th",[v._v("回收算法")]),v._v(" "),a("th",[v._v("mark-sweep")]),v._v(" "),a("th",[v._v("mark-compact")]),v._v(" "),a("th",[v._v("scavenge")])])]),v._v(" "),a("tbody",[a("tr",[a("td",[v._v("速度")]),v._v(" "),a("td",[v._v("中等")]),v._v(" "),a("td",[v._v("最慢")]),v._v(" "),a("td",[v._v("最快")])]),v._v(" "),a("tr",[a("td",[v._v("空间开销")]),v._v(" "),a("td",[v._v("少(有碎片)")]),v._v(" "),a("td",[v._v("少(无碎片)")]),v._v(" "),a("td",[v._v("双倍空间")])]),v._v(" "),a("tr",[a("td",[v._v("是否移动对象")]),v._v(" "),a("td",[v._v("否")]),v._v(" "),a("td",[v._v("是")]),v._v(" "),a("td",[v._v("是")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);